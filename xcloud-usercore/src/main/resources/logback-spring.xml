<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>logback</contextName>
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>
    <!--
        %d{HH: mm:ss.SSS}——日志输出时间
        %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
        %-5level——日志级别，并且使用5个字符靠左对齐
        %logger{36}——日志输出者的名字
        %msg——日志消息
        %n——平台的换行符
    -->
    <!-- console 输出到控制台-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--过滤器-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>

        <encoder>
            <!-- <pattern>%red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>-->
            <pattern>%white(%d{yyyy-MM-dd HH:mm:ss}) %highlight([%thread]) %green(%-5level) %cyan(%logger{10}) :
                %white(%msg%n)
            </pattern>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
        </encoder>
    </appender>

    <!--按天生成info日志-->
    <appender name="infoLogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
        <Prudent>true</Prudent>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>logs/info/%d{yyyy-MM-dd}.log</FileNamePattern><!--定义了日志的切分方式——把每一天的日志归档到一个文件中-->
            <maxHistory>30</maxHistory><!--只保留最近30天的日志-->
            <totalSizeCap>1GB</totalSizeCap><!--指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。-->
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
            </Pattern>
        </layout>
    </appender>

    <!--按天生成error日志-->
    <appender name="errorLogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
        <Prudent>true</Prudent>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>logs/error/%d{yyyy-MM-dd}.log</FileNamePattern><!--定义了日志的切分方式——把每一天的日志归档到一个文件中-->
            <maxHistory>30</maxHistory><!--只保留最近30天的日志-->
            <totalSizeCap>1GB</totalSizeCap><!--指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。-->
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
            </Pattern>
        </layout>
    </appender>

    <!--输出到debue日志文件-->
    <appender name="debueLogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/debue/%d{yyyy-MM-dd}.log</fileNamePattern><!--定义了日志的切分方式——把每一天的日志归档到一个文件中-->
            <maxHistory>30</maxHistory><!--只保留最近30天的日志-->
            <totalSizeCap>1GB</totalSizeCap><!--指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。-->
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <logger name="com.xcloud.framework.mapper" level="DEBUG" additivity="true"></logger>

    <!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性,配置level 属性会覆盖 appender 引入配置的属性-->
    <root>
        <appender-ref ref="console"/><!--控制台输出-->
        <appender-ref ref="infoLogFile"/><!--输出info级别日志文件-->
        <appender-ref ref="errorLogFile"/><!--输出error基本日志文件-->
    </root>

    <!--设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性-->
    <!--   name:用来指定受此logger约束的某一个包或者具体的某一个类。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。
    addtivity:是否向上级logger传递打印信息。默认是true-->


    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <springProfile name="testtest,develop">
        <logger name="com.springboot" level="INFO"/>
    </springProfile>
    <!-- 生产环境. -->
    <springProfile name="production">
        <logger name="com.springboot" level="ERROR"/>
    </springProfile>

</configuration>